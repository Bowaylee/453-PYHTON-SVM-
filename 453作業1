import yfinance as yf
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVR
from sklearn.metrics import mean_absolute_error, r2_score
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# 1. 下載台積電（TSMC）股票數據
stock = yf.Ticker("2330.TW")  # 台積電的Yahoo Finance代碼是 2330.TW
data = stock.history(period="5y")  # 取得過去五年的數據
data = data[['Open', 'High', 'Low', 'Close', 'Volume']]  # 只選擇相關列

# 2. 特徵工程：計算技術指標（如移動平均）
data['MA50'] = data['Close'].rolling(window=50).mean()  # 50日移動平均
data['MA200'] = data['Close'].rolling(window=200).mean()  # 200日移動平均

# 3. 處理缺失值
data.replace([np.inf, -np.inf], np.nan, inplace=True)  # 將無窮大替換為NaN
data = data.fillna(method='bfill')  # 用後一個數據填充NaN

# 再次檢查是否有NaN，並用前向填充
if data.isna().sum().sum() > 0:
    data = data.fillna(method='ffill')  # 用前一個數據填充NaN值

# 4. 確保沒有NaN值
if data.isna().sum().sum() > 0:
    print("還有 NaN 值未處理！")
else:
    print("所有 NaN 值已處理完畢")

# 5. 特徵和目標變數
X = data[['Close', 'MA50', 'MA200']]  # 使用收盤價、50日MA、200日MA作為特徵
y = data['Close'].shift(-1)  # 預測下一天的收盤價

# 6. 移除y中的NaN（最後一行會是NaN）
y = y.dropna()  # 刪除目標變數中的NaN值

# 7. 移除對應的特徵數據中的NaN值
X = X.loc[y.index]  # 確保X和y對應

# 8. 拆分訓練集和測試集
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 9. 特徵標準化
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# 10. 訓練 SVM 回歸模型
svm_model = SVR(kernel='rbf', C=100, gamma=0.1, epsilon=0.1)
svm_model.fit(X_train_scaled, y_train)

# 11. 預測與評估
y_pred = svm_model.predict(X_test_scaled)

# 計算評估指標：平均絕對誤差 (MAE) 和 R2分數
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Absolute Error (MAE): {mae}')
print(f'R2 Score: {r2}')

# 12. 結果可視化：實際與預測的比較
plt.figure(figsize=(10, 6))
plt.plot(y_test.index, y_test, label="Actual Prices")
plt.plot(y_test.index, y_pred, label="Predicted Prices", linestyle='--')
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.title('TSMC Stock Price Prediction: Actual vs Predicted (SVM)')
plt.legend()
plt.show()